<?php

/**
 * @file
 * Extends springboard_token_set module to support path-based token sets.
 */

/**
 * Implements hook_form_alter()
 *
 * Add the token UI to fields on this form if the following match token set settings:
 * - Path regex
 * - Form ID
 * - Field
 */
function springboard_token_set_wildcard_form_alter(&$form, &$form_state, $form_id) {
  // Get any form keys associated with any path wildcards matching this path:
  $target_form_keys = _springboard_token_set_wildcard_get_path_form_keys(current_path(), $form_id);

  // Attach the Token Set selector and token UI CSS/JS to each of the matching form keys:
  _springboard_token_set_wildcard_attach_to_target_form_keys($form, $target_form_keys);
}

/**
 * Implements hook_node_insert().
 * 
 * When a node is cloned by the node_clone module, also copy any Token Set
 * settings related to it based on path.
 */
function springboard_token_set_wildcard_node_insert($node) {
  if (isset($node->clone_from_original_nid)) {
    $original_prefix = 'node/' . $node->clone_from_original_nid . '/';
    $settings_query = db_query("SELECT tsid, path, form_id, form_key FROM {springboard_token_set_path_field_map} " .
      "WHERE path LIKE :node_prefix", array(':node_prefix' => $original_prefix . '%'));
    foreach ($settings_query as $result) {
      $new_path = str_replace($original_prefix, 'node/' . $node->nid . '/', $result->path);
      db_query("INSERT INTO {springboard_token_set_path_field_map} (tsid, path, form_id, form_key) " .
        "VALUES (:tsid, :path, :form_key)", array(
        ':tsid' => $result->tsid,
        ':path' => $new_path,
        ':form_id' => $result->form_id,
        ':form_key' => $result->form_key));
    }      
  }
}

/**
 *  If any form keys match this path/form_id combination based on wildcard defitions,
 *  return an array of form keys where the Token Set selector should be displayed
 *  as well as the currently selected token set for each form key, if present.
 *
 *  @param $path
 *    The URL path to be checked.
 *  @param $form_id
 *    The form ID of the form to be checked.
 */
function _springboard_token_set_wildcard_get_path_form_keys($path, $form_id) {
  $form_keys = array();
  module_load_include('inc', 'springboard_token_set_wildcard', 'springboard_token_set_wildcard.settings');
  $wildcard_settings_list = _springboard_token_set_wildcard_get_wildcard_definitions();
  foreach ($wildcard_settings_list as $wildcard_settings) {
    if (preg_match($wildcard_settings['wildcard_path'], $path)) {
      foreach ($wildcard_settings['form_keys'] as $form_key) {
        if (array_key_exists($form_key, $wildcard_settings['default_tsids'])) {
          $form_keys[$form_key] = $wildcard_settings['default_tsids'][$form_key];
        }
      }
    }
  }
  // Include the current value for Token Sets if available:
  $keys_query = db_query("SELECT tsid, form_id, form_key FROM {springboard_token_set_path_field_map} " .
    "WHERE form_id = :form_id AND path = :path", array(':form_id' => $form_id, ':path' => $path));
  foreach ($keys_query as $keys_data) {
    $form_keys[$keys_data->form_key] = $keys_data->tsid;
  }
  return $form_keys;
}

/**
 * Attach the token UI to all target fields that exist on this form and
 * have a non-0 Token Set ID, as 0 means "None".
 *
 * This is a recursive function.
 *
 * @param $element
 *   The form in question or the current, parent element being checked.
 *
 * @param $target_form_keys
 *   The form keys that should receive the Token Set selector.
 */
function _springboard_token_set_wildcard_attach_to_target_form_keys(&$element, $target_form_keys) {
  $results = array();
  $children = element_children($element);
  foreach ($children as $key) {
    $child = &$element[$key];
    if (is_array($child)) {
      if (!empty($child['#type'])) {
        $results[$key] = &$child;
        if (array_key_exists($key, $target_form_keys)) {
          $tsid = $target_form_keys[$key];
          if ($tsid != 0) {
            $tokens = springboard_token_set_get_tokens($tsid);
            $token_sets = $tokens;
            $sb_token_set_path = drupal_get_path('module', 'springboard_token_set');

            $element['#attributes']['data-token-set-id'] = $tsid;
            $element['extra']['description']['#attributes']['data-token-set-id'] = $tsid;
            $element['#attributes']['class'][] = 'form-wrapper';
            $element['#attributes']['class'][] = 'token-ui-field';
            $element['#attached']['js'] = array(
             'data' => $sb_token_set_path . '/js/springboard_token_set.js', 'type' => 'file');
            $element['#attached']['js'][] = array(
              'data' => array('token_sets_' . $tsid => $token_sets), 'type' => 'setting');
            $element['#attached']['css'] = array(
              'data' => $sb_token_set_path . '/css/springboard_token_set.css', 'type' => 'file');
            springboard_token_set_attach_token_ui($child, $token_sets);
          }
        } else {
          _springboard_token_set_wildcard_attach_to_target_form_keys($child, $target_form_keys);
        }
      }
    }
    unset($child);
  }
  return $results;
}

/**
 * Updates the currently selected Token Set for a given Token Set Selector.
 *
 * @param $path
 *   The path associated with this Token Set selector instance.
 * @param $form_key
 *   The form key associated with this Token Set selector instance.
 * @param $form_id
 *   The form ID associated with this Token Set selector instance.
 * @param $tsid
 *   The ID of the newly selected Token Set.
 */
function _springboard_token_set_wildcard_update_token_set($path, $form_key, $form_id, $tsid) {
  $exists_query = db_query("SELECT tsid FROM {springboard_token_set_path_field_map} " .
    "WHERE path = :path AND form_id = :form_id AND form_key = :form_key",
    array(':path' => $path, ':form_id' => $form_id, ':form_key' => $form_key));
  foreach ($exists_query as $exists) {
    db_query("UPDATE {springboard_token_set_path_field_map} SET tsid = :tsid " .
      "WHERE path = :path AND form_id = :form_id AND form_key = :form_key",
      array(':tsid' => $tsid, ':path' => $path, ':form_id' => $form_id, ':form_key' => $form_key));
    return;
  } 
  db_query("INSERT INTO {springboard_token_set_path_field_map} (tsid, path, form_id, form_key) " .
    "VALUES (:tsid, :path, :form_id, :form_key)",
    array(':tsid' => $tsid, ':path' => $path, ':form_id' => $form_id, ':form_key' => $form_key));
}
